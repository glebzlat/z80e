# Format:
#   - desc: <description>
#     source: <asm code>
#     # Test is disabled if skip field is present.
#     [skip: <reason>]
#     regs:
#       # Registers not mentioned in regs tested to be 0x00.
#       <register-name>: <int>
#     # Optional address -> value mapping. Tests only addresses from
#     # the mapping, conversely to regs mapping.
#     [mem:
#       <addr>: <int>]

tests:
  - desc: nop
    source: |
      nop
      nop
      halt
    regs:
      pc: 0x0003
  - desc: ld a, n
    source: |
      ld a, 0x10
      halt
    regs:
      a: 0x10
      pc: 0x0003
  - desc: ld b, n
    source: |
      ld b, 0x10
      halt
    regs:
      b: 0x10
      pc: 0x0003
  - desc: ld r, r'
    source: |
      ld a, 0x10
      ld b, a
      halt
    regs:
      a: 0x10
      b: 0x10
      pc: 0x0004
  - desc: ld bc, nn
    source: |
      ld bc, 0x1020
      halt
    regs:
      b: 0x10
      c: 0x20
      pc: 0x0004
  - desc: ld (hl), n
    source: |
      ld hl, 0x0010
      ld (hl), 0xaa
      halt
    regs:
      h: 0x00
      l: 0x10
      pc: 0x0006
    mem:
      0x10: 0xaa
  - desc: ld hl, nn
    source: |
      ld hl, 0x1234
      halt
    regs:
      h: 0x12
      l: 0x34
      pc: 0x0004
  - desc: ld r, (hl);
    source: |
      ld hl, 0x1234
      ld (hl), 0x10
      ld a, (hl)
      ld b, (hl)
      ld c, (hl)
      ld d, (hl)
      ld e, (hl)
      halt
    regs:
      a: 0x10
      b: 0x10
      c: 0x10
      d: 0x10
      d: 0x10
      e: 0x10
      h: 0x12
      l: 0x34
      pc: 0x000b
  - desc: ld (hl), r
    source: |
      ld a, 0xaf
      ld hl, 0x1000
      ld (hl), a
      halt
    regs:
      a: 0xaf
      h: 0x10
      l: 0x00
      pc: 0x0007
    mem:
      0x1000: 0xaf
  - desc: ld bc, nn; ld (bc), a; ld a, (bc)
    source: |
      ld a, 0xaf
      ld bc, 0x1234
      ld (bc), a
      ld a, 0xfa
      ld a, (bc)
      halt
    regs:
      a: 0xaf
      b: 0x12
      c: 0x34
      pc: 0x000a
    mem:
      0x1234: 0xaf
  - desc: ld de, nn; ld (de), a; ld a, (de)
    source: |
      ld a, 0xaf
      ld de, 0x1234
      ld (de), a
      ld a, 0xfa
      ld a, (de)
      halt
    regs:
      a: 0xaf
      d: 0x12
      e: 0x34
      pc: 0x000a
    mem:
      0x1234: 0xaf
  - desc: ld a, (nn); ld (nn), a
    source: |
      ld a, 0x10
      ld (0x1234), a
      ld a, 0x20
      ld a, (0x1234)
      halt
    regs:
      a: 0x10
      pc: 0x000b
    mem:
      0x1234: 0x10
  - desc: ld (nn), hl
    source: |
      ld hl, 0x1234
      ld (0x0001), hl
      halt
    regs:
      h: 0x12
      l: 0x34
      pc: 0x0007
    mem:
      0x0001: 0x34
      0x0002: 0x12
  - desc: ld sp, hl
    source: |
      ld hl, 0x1234
      ld sp, hl
      halt
    regs:
      h: 0x12
      l: 0x34
      sp: 0x1234
      pc: 0x0005
  - desc: ex de, hl
    source: |
      ld hl, 0x1020
      ld de, 0x3040
      ex de, hl
      halt
    regs:
      d: 0x10
      e: 0x20
      h: 0x30
      l: 0x40
      pc: 0x0008
  - desc: inc a
    source: |
      inc a
      halt
    regs:
      a: 0x01
      pc: 0x0002
  - desc: inc a - half-carry
    source: |
      ld a, 0x0f
      inc a
      halt
    regs:
      a: 0x10
      f: 0x10
      pc: 0x0004
  - desc: inc a - overflow
    source: |
      ld a, 0xff
      inc a
      halt
    regs:
      a: 0x00
      pc: 0x0004
      f: 0x55
  - desc: exx
    source: |
      ld bc, 0x1a2a
      ld de, 0x3a4a
      ld hl, 0x5a6a
      exx
      ld bc, 0x1b2b
      ld de, 0x3b4b
      ld hl, 0x5b6b
      halt
    regs:
      b: 0x1a
      b_alt: 0x1b
      c: 0x2a
      c_alt: 0x2b
      d: 0x3a
      d_alt: 0x3b
      e: 0x4a
      e_alt: 0x4b
      h: 0x5a
      h_alt: 0x5b
      l: 0x6a
      l_alt: 0x6b
      pc: 0x0014
  - desc: ex (sp), hl
    source: |
      ld de, 0x1234
      push de
      ex (sp), hl
      halt
    regs:
      d: 0x12
      e: 0x34
      h: 0x12
      l: 0x34
      sp: 0xfffe
      pc: 0x0006
  - desc: add a, r - no flags
    source: |
      ld b, 0x1
      add a, b
      halt
    regs:
      a: 0x01
      b: 0x01
      f: 0x00
      pc: 0x0004
  - desc: add a, r - sf
    source: |
      ld b, 0x80
      add a, b
      halt
    regs:
      a: 0x80
      b: 0x80
      f: 0x80
      pc: 0x0004
  - desc: add a, r - zf
    source: |
      add a, b
      halt
    regs:
      f: 0x40
      pc: 0x0002
  - desc: add a, r - yf
    source: |
      ld a, 0x10
      ld b, 0x10
      add a, b
      halt
    regs:
      a: 0x20
      b: 0x10
      f: 0x20
      pc: 0x0006
  - desc: add a, r - hf
    source: |
      ld a, 0xd
      ld b, 0x3
      add a, b
      halt
    regs:
      a: 0x10
      b: 0x03
      f: 0x10
      pc: 0x0006
  - desc: add a, r - xf
    source: |
      ld a, 0x04
      ld b, 0x04
      add a, b
      halt
    regs:
      a: 0x08
      b: 0x04
      f: 0x08
      pc: 0x0006
  - desc: dec a
    source: |
      ld a, 0x10
      dec a
      halt
    regs:
      a: 0x0f
      f: 0x1a
      pc: 0x0004
  - desc: add a, r - pvf, cf
    source: |
      ld a, 0xff
      ld b, 2
      add a, b
      halt
    regs:
      a: 0x01
      b: 0x02
      f: 0x15
      pc: 0x0006
  - desc: add a, r - all registers
    source: |
      ld b, 0x1
      ld c, 0x2
      ld d, 0x3
      ld e, 0x4
      ld h, 0x5
      ld l, 0x6
      add a, b
      add a, c
      add a, d
      add a, e
      add a, h
      add a, l
      halt
    regs:
      a: 0x15
      b: 0x01
      c: 0x02
      d: 0x03
      e: 0x04
      h: 0x05
      l: 0x06
      f: 0x10
      pc: 0x0013
  - desc: add a, n
    source: |
      ld a, 0xff
      add a, 0x40
      halt
    regs:
      a: 0x3f
      f: 0x2d
      pc: 0x0005
  - desc: add a, (hl)
    source: |
      ld hl, 0x0100
      ld (hl), 0x08
      ld a, 0x18
      add a, (hl)
      halt
    regs:
      a: 0x20
      h: 0x01
      f: 0x30
      pc: 0x0009
  - desc: add a, n - overflow
    source: |
      ld a, 0xff
      add a, 0x11
      halt
    regs:
      a: 0x10
      f: 0x15
      pc: 0x0005
  - desc: adc a, r - cf = 1
    source: |
      ld a, 0xff
      ld b, 0x16
      add a, 0x11  ; cf = 1, a = 0x10
      adc a, b     ; a = 0x10 + 0x16 + 1 = 0x27
      halt
    regs:
      a: 0x27
      b: 0x16
      f: 0x20
      pc: 0x0008
  - desc: adc a, r - cf = 0
    source: |
      ld a, 0x10
      ld b, 0x16
      adc a, b
      halt
    regs:
      a: 0x26
      b: 0x16
      f: 0x20
      pc: 0x0006
  - desc: adc a, r - edge case
    source: |
      ld a, 0xff
      ld b, 0xff
      add a, 0x02  ; cf = 1, a = 0x01
      adc a, b     ; a = 0x01 + 0xff + 1 = 0x01
      halt
    regs:
      a: 0x01
      b: 0xff
      f: 0x15
      pc: 0x0008
  - desc: adc a, n
    source: |
      ld a, 0xff
      add a, 0x02
      adc a, 0xff
      halt
    regs:
      a: 0x01
      f: 0x15
      pc: 0x0007
  - desc: adc a, (hl)
    source: |
      ld hl, 0x0100
      ld (hl), 0x16
      ld a, 0xff
      add a, 0x11
      adc a, (hl)
      halt
    regs:
      a: 0x27
      h: 0x01
      f: 0x20
      pc: 0x000b
  - desc: sub r - sf, yf, hf, xf, nf, cf
    source: |
      ld b, 0x01
      sub b
      halt
    regs:
      a: 0xff
      b: 0x01
      f: 0xbf
      pc: 0x0004
  - desc: sub r - zf, nf
    source: |
      ld b, 0x01
      ld a, 0x01
      sub b
      halt
    regs:
      a: 0x00
      b: 0x01
      f: 0x42
      pc: 0x0006
  - desc: sub r - all registers
    source: |
      ld a, 0x16
      ld b, 0x01
      ld c, 0x02
      ld d, 0x03
      ld e, 0x04
      ld h, 0x05
      ld l, 0x06
      sub b
      sub c
      sub d
      sub e
      sub h
      sub l
      halt
    regs:
      a: 0x01
      b: 0x01
      c: 0x02
      d: 0x03
      e: 0x04
      h: 0x05
      l: 0x06
      f: 0x02
      pc: 0x0015
  - desc: sub n
    source: |
      ld a, 0x10
      sub 0x06
      halt
    regs:
      a: 0x0a
      f: 0x1a
      pc: 0x0005
  - desc: sub (hl)
    source: |
      ld hl, 0x1234
      ld (hl), 0x10
      ld a, 0x40
      sub (hl)
      halt
    regs:
      a: 0x30
      h: 0x12
      l: 0x34
      f: 0x22
      pc: 0x0009
  - desc: sbc a, r - cf = 1
    source: |
      ld b, 0x05
      sub 0xea   ; cf = 1, a = 0x16
      sbc a, b   ; a = 0x16 - (0x05 + 1) = 0x10, cf = 0
      halt
    regs:
      a: 0x10
      b: 0x05
      f: 0x02
      pc: 0x0006
  - desc: sbc a, r
    source: |
      sub 0xea  ; cf = 1, a = 0x16
      sbc a, b  ; a = 0x16 - (0x00 + 1) = 0x15, cf = 0
      halt
    regs:
      a: 0x15
      f: 0x02
      pc: 0x0004
  - desc: sbc a, r - cf = 0
    source: |
      ld b, 0x01
      sbc a, b
      halt
    regs:
      a: 0xff
      b: 0x01
      f: 0xbf
      pc: 0x0004
  - desc: sbc a, r - edge case
  # Interesting case. I expected sbc to perform a - b - 1, but what it seems sbc
  # actually does is a - (b + 1):
  #
  # > Sum of second operand and carry flag is subtracted from the first operand.
  #
  # from http://z80-heaven.wikidot.com/instructions-set:sbc
    source: |
      ld b, 0xff
      sub 0x1
      sbc a, b
      halt
    regs:
      a: 0xff
      b: 0xff
      f: 0xaa
      pc: 0x0006
  - desc: sbc a, n
    source: |
      sub 0xea
      sbc a, 0x5
      halt
    regs:
      a: 0x10
      f: 0x02
      pc: 0x0005
  - desc: sbc a, (hl)
    source: |
      ld hl, 0x1234
      ld (hl), 0xff
      sub 0x1       ; cf = 1, a = 0xff
      sbc a, (hl)   ; a = 0xff - (0xff + 1) = 0xff
      halt
    regs:
      a: 0xff
      h: 0x12
      l: 0x34
      f: 0xaa
      pc: 0x0009
  - desc: dec a - overflow
    source: |
      ld a, 0x00
      dec a
      halt
    regs:
      a: 0xff
      pc: 0x0004
      f: 0xba
  - desc: rlca
    source: |
      ld a, 0x88
      rlca
      halt
    regs:
      a: 0x11
      f: 0x01
      pc: 0x0004
  - desc: ex af
    source: |
      ld a, 0x80
      rlca
      ex af
      ld a, 0xff
      inc a
      halt
    regs:
      a: 0x00
      f: 0x55
      a_alt: 0x01
      f_alt: 0x01
      pc: 0x0008
  - desc: add hl, bc
    source: |
      ld b, 0x10
      ld c, 0x20
      ld h, 0x30
      ld l, 0x40
      add hl, bc
      halt
    regs:
      b: 0x10
      c: 0x20
      h: 0x40
      l: 0x60
      f: 0x00
      pc: 0x000a
  - desc: add hl, bc - overflow
    source: |
      ld bc, 0xffff
      ld hl, 0x0001
      add hl, bc
      halt
    regs:
      b: 0xff
      c: 0xff
      h: 0x00
      l: 0x00
      f: 0x11
      pc: 0x0008
  - desc: inc bc
    source: |
      ld bc, 0x0010
      inc bc
      halt
    regs:
      b: 0x00
      c: 0x11
      f: 0x00
      pc: 0x0005
  - desc: inc bc - overflow
    source: |
      ld bc, 0xffff
      inc bc
      halt
    regs:
      b: 0x00
      c: 0x00
      f: 0x00
      pc: 0x0005
  - desc: inc bc - yf and xf
    source: |
      ld bc, 0x2800
      inc bc
      halt
    regs:
      b: 0x28
      c: 0x01
      f: 0x28
      pc: 0x0005
  - desc: dec b
    source: |
      ld b, 0x02
      dec b
      halt
    regs:
      b: 0x01
      f: 0x02
      pc: 0x0004
  - desc: dec b - overflow
    source: |
      ld b, 0x00
      dec b
      halt
    regs:
      b: 0xff
      f: 0xba
      pc: 0x0004
  - desc: dec b - p/v flag
    source: |
      ld b, 0x80
      dec b
      halt
    regs:
      b: 0x7f
      f: 0x3e
      pc: 0x0004
  - desc: dec bc
    source: |
      ld bc, 0x1010
      dec bc
      halt
    regs:
      b: 0x10
      c: 0x0f
      f: 0x00
      pc: 0x0005
  - desc: dec bc - yf and xf
    source: |
      ld bc, 0x2810
      dec bc
      halt
    regs:
      b: 0x28
      c: 0x0f
      f: 0x28
      pc: 0x0005
  - desc: dec bc - overflow
    source: |
      ld bc, 0x0000
      dec bc
      halt
    regs:
      b: 0xff
      c: 0xff
      f: 0x28
      pc: 0x0005
  - desc: "djnz d - condition false"
    source: |
      ld b, 0x01
      djnz 0x10
      halt
    regs:
      pc: 0x0005
  - desc: "djnz d - condition true"
    source: |
      .org 0x0000
          ; Decrement B register and perform the jump if B != 0.
          ld b, 0x02
          ; Asm decreases d by 2 bytes:
          ;    d = 0x10 - 2 = 0x0e
          ; PC before the jump:
          ;    pc = 2 + 2 = 0x0004 (ld b, n + djnz d)
          ; PC after the jump:
          ;    pc = 0x0004 + d = 0x0004 + 0x0e = 0x0012
          ; PC after executing halt:
          ;    pc = 0x0012 + 1 = 0x0013
          djnz 0x10 ; In LST format 0x10 is replaced by 0x08.
      .org 0x0012
          halt
    regs:
      b: 0x01
      pc: 0x0013
  - desc: rla
    source: |
      ld a, 0x88
      rla
      halt
    regs:
      a: 0x10
      f: 0x01
      pc: 0x0004
  - desc: "rla - CF -> bit 0"
    source: |
      ld a, 0x88
      rla  ; a = 0x10, cf = 1
      rla  ; a = 0x21, cf = 0
      halt
    regs:
      a: 0x21
      f: 0x20
      pc: 0x0005
  - desc: rra
    source: |
      ld a, 0x88
      rra
      halt
    regs:
      a: 0x44
      f: 0x00
      pc: 0x0004
  - desc: "rra - CF -> bit 7"
    source: |
      ld a, 0x22
      rra  ; c = 0, a = 0x11
      rra  ; c = 1, a = 0x88
      halt
    regs:
      a: 0x88
      f: 0x09
      pc: 0x0005
  - desc: "jr nz, d - condition false"
    source: |
      ld a, 0x01
      dec a
      jr nz, 0x10
      halt
    regs:
      a: 0x00
      f: 0x42
      pc: 0x0006
  - desc: "jr nz, d - condition true"
    source: |
      .org 0x0000
          ld a, 0x00
          inc a  ; a = 0x01, this makes ZF = 0
          jr nz, 0x10
      .org 0x0013
          halt
    regs:
      a: 0x01
      pc: 0x0014
  - desc: "daa - a = 0x00 in (0x00, 0x99), HNC = 000, add 0x00"
    source: |
      ld a, 0x00
      daa
      halt
    regs:
      a: 0x00
      f: 0x44
      pc: 0x0004
  - desc: "daa - a = 0x99 in (0x00, 0x99), HNC = 000, add 0x00"
    source: |
      ld a, 0x99
      daa
      halt
    regs:
      a: 0x99
      f: 0x8c
      pc: 0x0004
  - desc: "daa - a = 0x0a in (0x0a, 0x9f), HNC = 000, add 0x06"
    source: |
      ld a, 0x0a
      daa
      halt
    regs:
      a: 0x10
      f: 0x10
      pc: 0x0004
  - desc: "daa - a = 0x9f in (0x0a, 0x9f), HNC = 000, add 0x66"
    source: |
      ld a, 0x9f
      daa
      halt
    regs:
      a: 0x05
      f: 0x15
      pc: 0x0004
  - desc: "push rr"
    source: |
      ld sp, 0x1000
      ld hl, 0x1234
      push hl
      halt
    regs:
      h: 0x12
      l: 0x34
      sp: 0xffe
      pc: 0x0008
    mem:
      0xfff: 0x12
      0xffe: 0x34
  - desc: "pop rr"
    source: |
      ld sp, 0x1000
      ld de, 0x1234
      push de
      pop hl
      halt
    regs:
      d: 0x12
      e: 0x34
      h: 0x12
      l: 0x34
      sp: 0x1000
      pc: 0x0009
    mem:
      0xfff: 0x12
      0xffe: 0x34

